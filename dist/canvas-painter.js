var defined = require('defined');
var ref = require('./math');
var expand2D = ref.expand2D;

module.exports = function (context) {
  var paint = function (opt) {
    if ( opt === void 0 ) opt = {};

    var fill = opt.fill;
    var stroke = opt.stroke;
    var defaultColor = 'black';
    var alpha = defined(opt.alpha, 1);

    // Default to fill-only
    if (opt.fill == null && opt.stroke == null) { fill = true; }

    if (fill) {
      var fillAlpha = defined(opt.fillAlpha, 1);
      context.fillStyle = typeof fill === 'boolean' ? defaultColor : fill;
      context.globalAlpha = alpha * fillAlpha;
      context.fill();
    }
    var lineWidth = defined(opt.lineWidth, 1);
    if (stroke && lineWidth > 0) {
      var strokeAlpha = defined(opt.strokeAlpha, 1);
      context.strokeStyle = typeof stroke === 'boolean' ? defaultColor : stroke;
      context.lineWidth = lineWidth;
      context.lineCap = opt.lineCap || 'butt';
      context.lineJoin = opt.lineJoin || 'miter';
      context.miterLimit = defined(opt.miterLimit, 10);
      context.globalAlpha = alpha * strokeAlpha;
      context.stroke();
    }
  };

  var circle = function (opt) {
    if ( opt === void 0 ) opt = {};

    context.beginPath();
    var radius = Math.max(0, defined(opt.radius, 1));
    var position = expand2D(opt.position);
    var arcStart = defined(opt.arcStart, 0);
    var arcEnd = defined(opt.arcEnd, Math.PI * 2);
    context.arc(position[0], position[1], radius, arcStart, arcEnd, false);
    paint(opt);
  };

  var rect = function (opt) {
    if ( opt === void 0 ) opt = {};

    context.beginPath();
    var position = expand2D(opt.position);
    var width = defined(opt.width, 1);
    var height = defined(opt.height, 1);
    context.rect(position[0], position[1], width, height);
    paint(opt);
  };

  var _line = function (path, opt, defaultToStroke) {
    if ( opt === void 0 ) opt = {};
    if ( defaultToStroke === void 0 ) defaultToStroke = false;

    opt = Object.assign({}, opt);

    if (defaultToStroke) {
      if (opt.fill == null && opt.stroke == null) { opt.stroke = true; }
    }

    context.beginPath();
    path.forEach(function (point) { return context.lineTo(point[0], point[1]); });
    if (opt.closed) { context.closePath(); }
    paint(opt);
  };

  var polyline = function (path, opt) {
    if ( opt === void 0 ) opt = {};

    return _line(path, opt, true);
  };
  var shape = function (shape, opt) {
    if ( opt === void 0 ) opt = {};

    return _line(shape, opt, false);
  };

  var polylines = function (lines, opt) {
    if ( opt === void 0 ) opt = {};

    lines.forEach(function (path) { return polyline(path, opt); });
  };

  var clear = function (opt) {
    if ( opt === void 0 ) opt = {};

    var position = expand2D(opt.position);
    var width = defined(opt.width, context.canvas.width);
    var height = defined(opt.height, context.canvas.height);

    // clear first in case we have a translucent fill
    context.clearRect(position[0], position[1], width, height);

    // now allow user to fill
    if (opt.fill) {
      context.beginPath();
      context.rect(position[0], position[1], width, height);
      paint(opt);
    }
  };

  return {
    clear: clear,
    paint: paint,
    rect: rect,
    circle: circle,
    polyline: polyline,
    polylines: polylines,
    shape: shape
  };
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,