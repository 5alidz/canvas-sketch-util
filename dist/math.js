var lerp = require('lerp');
var inverseLerp = require('unlerp');
var clamp = require('clamp');
var defined = require('defined');

var toFinite = function (n, defaultValue) {
  if ( defaultValue === void 0 ) defaultValue = 0;

  return typeof n === 'number' && isFinite(n) ? n : defaultValue;
};

var expandVector = function (dims) {
  return function (p, defaultValue) {
    if ( defaultValue === void 0 ) defaultValue = 0;

    var scalar;
    if (p == null) {
      // No vector, create a default one
      scalar = defaultValue;
    } else if (typeof p === 'number' && isFinite(p)) {
      // Expand single channel to multiple vector
      scalar = p;
    }

    var out = [];
    if (scalar == null) {
      for (var i = 0; i < dims; i++) {
        out[i] = toFinite(p[i], defaultValue);
      }
    } else {
      for (var i$1 = 0; i$1 < dims; i$1++) {
        out[i$1] = scalar;
      }
    }
    return out;
  };
};

var lerpArray = function (min, max, t, out) {
  if ( out === void 0 ) out = [];

  if (min.length !== max.length) {
    throw new Error('min and max array are expected to have the same length');
  }
  for (var i = 0; i < min.length; i++) {
    out[i] = lerp(min[i], max[i], t);
  }
  return out;
};

var newArray = function (n, initialValue) {
  if ( n === void 0 ) n = 0;

  var out = [];
  for (var i = 0; i < n; i++) { out.push(initialValue); }
  return out;
};

var linspace = function (n, opts) {
  if ( n === void 0 ) n = 0;
  if ( opts === void 0 ) opts = {};

  if (typeof opts === 'boolean') {
    opts = { endpoint: true };
  }
  var offset = defined(opts.offset, 0);
  return opts.endpoint
    ? newArray(n).map(function (_, i) { return n <= 1 ? 0 : ((i + offset) / (n - 1)); })
    : newArray(n).map(function (_, i) { return (i + offset) / n; });
};

var mod = function (a, b) { return ((a % b) + b) % b; };

var lerpKeyframes = function (values, t) {
  t = mod(t, 1);

  var len = values.length - 1;
  var whole = t * len;
  var frame = Math.floor(whole);
  var fract = whole - frame;

  var nextFrame = Math.min(frame + 1, len);
  var a = values[frame];
  var b = values[nextFrame];
  return lerp(a, b, fract);
};

module.exports = {
  linspace: linspace,
  lerpArray: lerpArray,
  lerp: lerp,
  inverseLerp: inverseLerp,
  lerpKeyframes: lerpKeyframes,
  clamp: clamp,
  mod: mod,
  clamp01: function (v) { return clamp(v, 0, 1); },
  smoothstep: require('smoothstep'),
  expand2D: expandVector(2),
  expand3D: expandVector(3),
  expand4D: expandVector(4)
};

// clamp
// clamp01
// closestPowerOfTwo
// colorTemperatureToRGB
// deltaAngle
// inverseLerp
// lerpAngle
// isPowerOfTwo
// lerpUnclamped
// gammaToLinearSpace
// linearToGammaSpace
// nextPowerOfTwo
// sign
// fract
// lerp
// smoothStep / smoothstep
// smoothDamp
// smoothDampAngle
//# sourceMappingURL=data:application/json;charset=utf-8;base64,