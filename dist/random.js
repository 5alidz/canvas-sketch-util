// a utility for random number generation
var seedRandom = require('seed-random');
var SimplexNoise = require('simplex-noise');
var ref = require('./math');
var lerpArray = ref.lerpArray;
var expand2D = ref.expand2D;
var ref$1 = require('./geom');
var getPolylineArclengths = ref$1.getPolylineArclengths;

var NoiseGenerator = function NoiseGenerator (rnd) {
  this._simplex = new SimplexNoise(rnd);
};

NoiseGenerator.prototype.noise1D = function noise1D (x) {
  return this._simplex.noise2D(x, 0);
};

NoiseGenerator.prototype.noise2D = function noise2D (x, y) {
  return this._simplex.noise2D(x, y);
};

NoiseGenerator.prototype.noise3D = function noise3D (x, y, z) {
  return this._simplex.noise3D(x, y, z);
};

NoiseGenerator.prototype.noise4D = function noise4D (x, y, z, w) {
  return this._simplex.noise4D(x, y, z, w);
};

var Rand = function Rand (defaultSeed, opt) {
  if ( defaultSeed === void 0 ) defaultSeed = null;
  if ( opt === void 0 ) opt = {};

  this.defaultRandom = Math.random;
  this.quiet = opt.quiet !== false;
  this._nextGaussian = null;
  this._hasNextGaussian = false;
  this.setSeed(defaultSeed);
};

Rand.prototype.createInstance = function createInstance (seed, opt) {
  return new Rand(seed, opt);
};

Rand.prototype.getRandomSeed = function getRandomSeed () {
  var seed = String(Math.floor(Math.random() * 1000000));
  return seed;
};

Rand.prototype.setSeed = function setSeed (seed, opt) {
    if ( opt === void 0 ) opt = {};

  if (typeof seed === 'number' || typeof seed === 'string') {
    this.seed = String(seed);
    if (!this.quiet) { console.log('[util-random] Current Seed:', this.seed); }
    this.random = seedRandom(this.seed, opt);
  } else {
    this.seed = null;
    this.random = this.defaultRandom;
  }
  this.noiseGenerator = this._createNoise();
  this._nextGaussian = null;
  this._hasNextGaussian = false;
};

Rand.prototype.value = function value () {
  return this.random();
};

Rand.prototype.valueNonZero = function valueNonZero () {
    var this$1 = this;

  var u = 0;
  while (u === 0) { u = this$1.value(); }
  return u;
};

Rand.prototype.getSeed = function getSeed () {
  return this.seed;
};

// Should this be public?
Rand.prototype._createNoise = function _createNoise () {
  return new NoiseGenerator(this.random);
};

Rand.prototype.permuteNoise = function permuteNoise () {
  this.noiseGenerator = this._createNoise();
};

Rand.prototype.noise1D = function noise1D (x) {
  return this.noiseGenerator.noise1D(x);
};

Rand.prototype.noise2D = function noise2D (x, y) {
  return this.noiseGenerator.noise2D(x, y);
};

Rand.prototype.noise3D = function noise3D (x, y, z) {
  return this.noiseGenerator.noise3D(x, y, z);
};

Rand.prototype.noise4D = function noise4D (x, y, z, w) {
  return this.noiseGenerator.noise4D(x, y, z, w);
};

Rand.prototype.sign = function sign () {
  return this.boolean() ? 1 : -1;
};

Rand.prototype.boolean = function boolean () {
  return this.value() > 0.5;
};

Rand.prototype.chance = function chance (n) {
    if ( n === void 0 ) n = 0.5;

  return this.value() < n;
};

Rand.prototype.range = function range (min, max) {
  if (max === undefined) {
    max = min;
    min = 0;
  }

  if (typeof min !== 'number' || typeof max !== 'number') {
    throw new TypeError('Expected all arguments to be numbers');
  }

  return this.value() * (max - min) + min;
};

Rand.prototype.rangeFloor = function rangeFloor (min, max) {
  if (max === undefined) {
    max = min;
    min = 0;
  }

  if (typeof min !== 'number' || typeof max !== 'number') {
    throw new TypeError('Expected all arguments to be numbers');
  }

  return Math.floor(this.range(min, max));
};

Rand.prototype.pick = function pick (array) {
  if (array.length === 0) { return undefined; }
  return array[this.rangeFloor(0, array.length)];
};

Rand.prototype.shuffle = function shuffle (arr) {
    var this$1 = this;

  if (!Array.isArray(arr)) {
    throw new TypeError('Expected Array, got ' + typeof arr);
  }

  var rand;
  var tmp;
  var len = arr.length;
  var ret = arr.slice();
  while (len) {
    rand = Math.floor(this$1.value() * len--);
    tmp = ret[len];
    ret[len] = ret[rand];
    ret[rand] = tmp;
  }
  return ret;
};

Rand.prototype.insideSquare = function insideSquare (scale, out) {
    if ( scale === void 0 ) scale = 1;
    if ( out === void 0 ) out = [];

  scale = expand2D(scale, 1);
  out[0] = scale[0] * this.range(-1, 1);
  out[1] = scale[1] * this.range(-1, 1);
  return out;
};

Rand.prototype.onSquare = function onSquare (scale, out) {
    if ( scale === void 0 ) scale = 1;
    if ( out === void 0 ) out = [];

  scale = expand2D(scale, 1);
  var path = [
    [ -scale[0], -scale[1] ], [ scale[0], -scale[1] ],
    [ scale[0], scale[1] ], [ -scale[0], scale[1] ]
  ];
  path.push(path[0]);
  return this.onPolyline(path, out);
};

Rand.prototype.onPolyline = function onPolyline (path, out) {
    if ( out === void 0 ) out = [];

  if (path.length === 0) {
    throw new Error('The path has no points; cannot determine a random point along it.');
  }
  if (path.length === 1) {
    return path[0].slice();
  }

  var arclengths = getPolylineArclengths(path);
  var edges = [];
  for (var i = 0; i < path.length - 1; i++) {
    edges.push(arclengths[i + 1] - arclengths[i]);
  }

  var index = this.weighted(edges);
  return this.onLineSegment(path[index], path[index + 1], out);
};

Rand.prototype.onLineSegment = function onLineSegment (a, b, out) {
    if ( out === void 0 ) out = [];

  var t = this.value();
  return lerpArray(a, b, t, out);
};

Rand.prototype.onCircle = function onCircle (radius, out) {
    if ( radius === void 0 ) radius = 1;
    if ( out === void 0 ) out = [];

  var theta = this.value() * 2.0 * Math.PI;
  out[0] = radius * Math.cos(theta);
  out[1] = radius * Math.sin(theta);
  return out;
};

Rand.prototype.insideCircle = function insideCircle (radius, out) {
    if ( radius === void 0 ) radius = 1;
    if ( out === void 0 ) out = [];

  this.onCircle(1, out);
  var r = radius * Math.sqrt(this.value());
  out[0] *= r;
  out[1] *= r;
  return out;
};

Rand.prototype.onSphere = function onSphere (radius, out) {
    if ( radius === void 0 ) radius = 1;
    if ( out === void 0 ) out = [];

  var u = this.value() * Math.PI * 2;
  var v = this.value() * 2 - 1;
  var phi = u;
  var theta = Math.acos(v);
  out[0] = radius * Math.sin(theta) * Math.cos(phi);
  out[1] = radius * Math.sin(theta) * Math.sin(phi);
  out[2] = radius * Math.cos(theta);
  return out;
};

Rand.prototype.insideSphere = function insideSphere (radius, out) {
    if ( radius === void 0 ) radius = 1;
    if ( out === void 0 ) out = [];

  var u = this.value() * Math.PI * 2;
  var v = this.value() * 2 - 1;
  var k = this.value();

  var phi = u;
  var theta = Math.acos(v);
  var r = radius * Math.cbrt(k);
  out[0] = r * Math.sin(theta) * Math.cos(phi);
  out[1] = r * Math.sin(theta) * Math.sin(phi);
  out[2] = r * Math.cos(theta);
  return out;
};

Rand.prototype.quaternion = function quaternion (out) {
    if ( out === void 0 ) out = [];

  var u1 = this.value();
  var u2 = this.value();
  var u3 = this.value();

  var sq1 = Math.sqrt(1 - u1);
  var sq2 = Math.sqrt(u1);

  var theta1 = Math.PI * 2 * u2;
  var theta2 = Math.PI * 2 * u3;

  var x = Math.sin(theta1) * sq1;
  var y = Math.cos(theta1) * sq1;
  var z = Math.sin(theta2) * sq2;
  var w = Math.cos(theta2) * sq2;
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
};

Rand.prototype.weightedSet = function weightedSet (set) {
    if ( set === void 0 ) set = [];

  if (set.length === 0) { return null; }
  return set[this.weightedSetIndex(set)].value;
};

Rand.prototype.weightedSetIndex = function weightedSetIndex (set) {
    if ( set === void 0 ) set = [];

  if (set.length === 0) { return -1; }
  return this.weighted(set.map(function (s) { return s.weight; }));
};

Rand.prototype.weighted = function weighted (weights) {
    if ( weights === void 0 ) weights = [];

  if (weights.length === 0) { return -1; }
  var totalWeight = 0;

  for (var i = 0; i < weights.length; i++) {
    totalWeight += weights[i];
  }

  if (totalWeight <= 0) { throw new Error('Weights must sum to > 0'); }

  var random = this.value() * totalWeight;
  for (var i$1 = 0; i$1 < weights.length; i$1++) {
    if (random < weights[i$1]) {
      return i$1;
    }
    random -= weights[i$1];
  }
  return 0;
};

// Distributions

Rand.prototype.gaussian = function gaussian (mean, standardDerivation) {
    var this$1 = this;
    if ( mean === void 0 ) mean = 0;
    if ( standardDerivation === void 0 ) standardDerivation = 1;

  // https://github.com/openjdk-mirror/jdk7u-jdk/blob/f4d80957e89a19a29bb9f9807d2a28351ed7f7df/src/share/classes/java/util/Random.java#L496
  if (this._hasNextGaussian) {
    this._hasNextGaussian = false;
    var result = this._nextGaussian;
    this._nextGaussian = null;
    return mean + standardDerivation * result;
  } else {
    var v1 = 0;
    var v2 = 0;
    var s = 0;
    do {
      v1 = this$1.value() * 2 - 1; // between -1 and 1
      v2 = this$1.value() * 2 - 1; // between -1 and 1
      s = v1 * v1 + v2 * v2;
    } while (s >= 1 || s === 0);
    var multiplier = Math.sqrt(-2 * Math.log(s) / s);
    this._nextGaussian = (v2 * multiplier);
    this._hasNextGaussian = true;
    return mean + standardDerivation * (v1 * multiplier);
  }
};

Rand.prototype.laplace = function laplace (mean, std) {
    if ( mean === void 0 ) mean = 0;
    if ( std === void 0 ) std = 1;

  var u = this.value();
  u = u + u - 1.0;
  if (u > 0) { return mean + std * -Math.log(1.0 - u); }
  else { return mean + std * Math.log(1.0 + u); }
};

Rand.prototype.logistic = function logistic (mean, std) {
    if ( mean === void 0 ) mean = 0;
    if ( std === void 0 ) std = 1;

  return mean + std * (-Math.log(1.0 / this.valueNonZero() - 1.0));
};

Rand.prototype.powerLaw = function powerLaw (mean, std, alpha, cut) {
    if ( mean === void 0 ) mean = 0;
    if ( std === void 0 ) std = 1;
    if ( alpha === void 0 ) alpha = 0;
    if ( cut === void 0 ) cut = 1;

  if (alpha < 0) { throw new Error('alpha must be >= 0'); }
  return mean + std * (cut * Math.pow(this.value(), 1.0 / (alpha + 1.0)));
};

Rand.prototype.weibull = function weibull (mean, std, alpha, beta) {
    if ( mean === void 0 ) mean = 0;
    if ( std === void 0 ) std = 1;
    if ( alpha === void 0 ) alpha = 1;
    if ( beta === void 0 ) beta = 1;

  if (alpha <= 0) { throw new Error('alpha must be > 0'); }
  return mean + std * Math.pow(beta * (-Math.log(1.0 - this.value())), 1.0 / alpha);
};

Rand.prototype.erlang = function erlang (mean, std, exp, variance) {
    var this$1 = this;
    if ( mean === void 0 ) mean = 0;
    if ( std === void 0 ) std = 1;
    if ( exp === void 0 ) exp = 1;
    if ( variance === void 0 ) variance = 1;

  if (variance === 0) { throw new Error('variance must be != 0'); }
  var k = Math.floor((exp * exp) / variance + 0.5);
  k = (k > 0) ? k : 1;
  var a = k / exp;
  var prod = 1.0;
  for (var i = 0; i < k; i++) { prod *= this$1.value(); }
  return mean + std * (-Math.log(prod) / a);
};

Rand.prototype.lambda = function lambda (mean, std, l3, l4) {
    if ( mean === void 0 ) mean = 0;
    if ( std === void 0 ) std = 1;
    if ( l3 === void 0 ) l3 = 1;
    if ( l4 === void 0 ) l4 = 1;

  var lSign = ((l3 < 0) || (l4 < 0)) ? -1 : 1;
  var u = this.valueNonZero();
  var x = lSign * (Math.exp(Math.log(u) * l3) - Math.exp(Math.log(1.0 - u) * l4));
  return mean + std * x;
};

Rand.prototype.triangular = function triangular (mean, std) {
    if ( mean === void 0 ) mean = 0;
    if ( std === void 0 ) std = 1;

  var u = this.value();
  if (u <= 0.5) { return mean + std * (Math.sqrt(2.0 * u) - 1.0); }
  else { return mean + std * (1.0 - Math.sqrt(2.0 * (1.0 - u))); }
};

Rand.prototype.cauchy = function cauchy (mean, std) {
    if ( mean === void 0 ) mean = 0;
    if ( std === void 0 ) std = 1;

  return mean + std * Math.tan(Math.PI * this.value());
};

module.exports = new Rand();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,