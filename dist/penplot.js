var defined = require('defined');
var convertUnits = require('convert-units');

// 96 DPI for SVG programs like Inkscape etc
var TO_PX = 35.43307;
var DEFAULT_SVG_LINE_WIDTH = 0.03;

function cm (value, unit) {
  return convertUnits(value).from(unit).to('cm');
}

module.exports.exportPolylines = exportPolylines;
function exportPolylines (polylines, opt) {
  if ( opt === void 0 ) opt = {};

  var dimensions = opt.dimensions;
  if (!dimensions) { throw new TypeError('must specify dimensions currently'); }
  if (!opt.units || typeof opt.units !== 'string') { throw new TypeError('must specify { units } string as well as dimensions, such as: { units: "in" }'); }
  var units = opt.units.toLowerCase();
  if (units === 'px') { throw new Error('px units are not yet supported by this function, your print should be defined in "cm" or "in"'); }
  var decimalPlaces = 5;

  var commands = [];
  polylines.forEach(function (line) {
    line.forEach(function (point, j) {
      var type = (j === 0) ? 'M' : 'L';
      var x = (TO_PX * cm(point[0], units)).toFixed(decimalPlaces);
      var y = (TO_PX * cm(point[1], units)).toFixed(decimalPlaces);
      commands.push((type + " " + x + " " + y));
    });
  });

  var svgPath = commands.join(' ');
  var dimensionsInCM = dimensions.map(function (d) { return cm(d, units); });
  var viewWidth = (dimensionsInCM[0] * TO_PX).toFixed(decimalPlaces);
  var viewHeight = (dimensionsInCM[1] * TO_PX).toFixed(decimalPlaces);
  var fillStyle = opt.fillStyle || 'none';
  var strokeStyle = opt.strokeStyle || 'black';
  var lineWidth = defined(opt.lineWidth, DEFAULT_SVG_LINE_WIDTH);

  var data = "<?xml version=\"1.0\" standalone=\"no\"?>\n  <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \n    \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n  <svg width=\"" + (dimensionsInCM[0]) + "cm\" height=\"" + (dimensionsInCM[1]) + "cm\"\n       xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 " + viewWidth + " " + viewHeight + "\">\n   <g>\n     <path d=\"" + svgPath + "\" fill=\"" + fillStyle + "\" stroke=\"" + strokeStyle + "\" stroke-width=\"" + lineWidth + "cm\" />\n   </g>\n</svg>";
  return { data: data, extension: '.svg' };
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVucGxvdC5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL3BlbnBsb3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGVmaW5lZCA9IHJlcXVpcmUoJ2RlZmluZWQnKTtcbmNvbnN0IGNvbnZlcnRVbml0cyA9IHJlcXVpcmUoJ2NvbnZlcnQtdW5pdHMnKTtcblxuLy8gOTYgRFBJIGZvciBTVkcgcHJvZ3JhbXMgbGlrZSBJbmtzY2FwZSBldGNcbmNvbnN0IFRPX1BYID0gMzUuNDMzMDc7XG5jb25zdCBERUZBVUxUX1NWR19MSU5FX1dJRFRIID0gMC4wMztcblxuZnVuY3Rpb24gY20gKHZhbHVlLCB1bml0KSB7XG4gIHJldHVybiBjb252ZXJ0VW5pdHModmFsdWUpLmZyb20odW5pdCkudG8oJ2NtJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmV4cG9ydFBvbHlsaW5lcyA9IGV4cG9ydFBvbHlsaW5lcztcbmZ1bmN0aW9uIGV4cG9ydFBvbHlsaW5lcyAocG9seWxpbmVzLCBvcHQgPSB7fSkge1xuICBjb25zdCBkaW1lbnNpb25zID0gb3B0LmRpbWVuc2lvbnM7XG4gIGlmICghZGltZW5zaW9ucykgdGhyb3cgbmV3IFR5cGVFcnJvcignbXVzdCBzcGVjaWZ5IGRpbWVuc2lvbnMgY3VycmVudGx5Jyk7XG4gIGlmICghb3B0LnVuaXRzIHx8IHR5cGVvZiBvcHQudW5pdHMgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdtdXN0IHNwZWNpZnkgeyB1bml0cyB9IHN0cmluZyBhcyB3ZWxsIGFzIGRpbWVuc2lvbnMsIHN1Y2ggYXM6IHsgdW5pdHM6IFwiaW5cIiB9Jyk7XG4gIGNvbnN0IHVuaXRzID0gb3B0LnVuaXRzLnRvTG93ZXJDYXNlKCk7XG4gIGlmICh1bml0cyA9PT0gJ3B4JykgdGhyb3cgbmV3IEVycm9yKCdweCB1bml0cyBhcmUgbm90IHlldCBzdXBwb3J0ZWQgYnkgdGhpcyBmdW5jdGlvbiwgeW91ciBwcmludCBzaG91bGQgYmUgZGVmaW5lZCBpbiBcImNtXCIgb3IgXCJpblwiJyk7XG4gIGNvbnN0IGRlY2ltYWxQbGFjZXMgPSA1O1xuXG4gIGxldCBjb21tYW5kcyA9IFtdO1xuICBwb2x5bGluZXMuZm9yRWFjaChsaW5lID0+IHtcbiAgICBsaW5lLmZvckVhY2goKHBvaW50LCBqKSA9PiB7XG4gICAgICBjb25zdCB0eXBlID0gKGogPT09IDApID8gJ00nIDogJ0wnO1xuICAgICAgY29uc3QgeCA9IChUT19QWCAqIGNtKHBvaW50WzBdLCB1bml0cykpLnRvRml4ZWQoZGVjaW1hbFBsYWNlcyk7XG4gICAgICBjb25zdCB5ID0gKFRPX1BYICogY20ocG9pbnRbMV0sIHVuaXRzKSkudG9GaXhlZChkZWNpbWFsUGxhY2VzKTtcbiAgICAgIGNvbW1hbmRzLnB1c2goYCR7dHlwZX0gJHt4fSAke3l9YCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGNvbnN0IHN2Z1BhdGggPSBjb21tYW5kcy5qb2luKCcgJyk7XG4gIGNvbnN0IGRpbWVuc2lvbnNJbkNNID0gZGltZW5zaW9ucy5tYXAoZCA9PiBjbShkLCB1bml0cykpO1xuICBjb25zdCB2aWV3V2lkdGggPSAoZGltZW5zaW9uc0luQ01bMF0gKiBUT19QWCkudG9GaXhlZChkZWNpbWFsUGxhY2VzKTtcbiAgY29uc3Qgdmlld0hlaWdodCA9IChkaW1lbnNpb25zSW5DTVsxXSAqIFRPX1BYKS50b0ZpeGVkKGRlY2ltYWxQbGFjZXMpO1xuICBjb25zdCBmaWxsU3R5bGUgPSBvcHQuZmlsbFN0eWxlIHx8ICdub25lJztcbiAgY29uc3Qgc3Ryb2tlU3R5bGUgPSBvcHQuc3Ryb2tlU3R5bGUgfHwgJ2JsYWNrJztcbiAgY29uc3QgbGluZVdpZHRoID0gZGVmaW5lZChvcHQubGluZVdpZHRoLCBERUZBVUxUX1NWR19MSU5FX1dJRFRIKTtcblxuICBjb25zdCBkYXRhID0gYDw/eG1sIHZlcnNpb249XCIxLjBcIiBzdGFuZGFsb25lPVwibm9cIj8+XG4gIDwhRE9DVFlQRSBzdmcgUFVCTElDIFwiLS8vVzNDLy9EVEQgU1ZHIDEuMS8vRU5cIiBcbiAgICBcImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZFwiPlxuICA8c3ZnIHdpZHRoPVwiJHtkaW1lbnNpb25zSW5DTVswXX1jbVwiIGhlaWdodD1cIiR7ZGltZW5zaW9uc0luQ01bMV19Y21cIlxuICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2ZXJzaW9uPVwiMS4xXCIgdmlld0JveD1cIjAgMCAke3ZpZXdXaWR0aH0gJHt2aWV3SGVpZ2h0fVwiPlxuICAgPGc+XG4gICAgIDxwYXRoIGQ9XCIke3N2Z1BhdGh9XCIgZmlsbD1cIiR7ZmlsbFN0eWxlfVwiIHN0cm9rZT1cIiR7c3Ryb2tlU3R5bGV9XCIgc3Ryb2tlLXdpZHRoPVwiJHtsaW5lV2lkdGh9Y21cIiAvPlxuICAgPC9nPlxuPC9zdmc+YDtcbiAgcmV0dXJuIHsgZGF0YSwgZXh0ZW5zaW9uOiAnLnN2ZycgfTtcbn1cbiJdLCJuYW1lcyI6WyJjb25zdCIsImxldCJdLCJtYXBwaW5ncyI6IkFBQUFBLEdBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ25DQSxHQUFLLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQzs7O0FBRzlDQSxHQUFLLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztBQUN2QkEsR0FBSyxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQzs7QUFFcEMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtFQUN4QixPQUFPLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ2hEOztBQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztBQUNqRCxTQUFTLGVBQWUsRUFBRSxTQUFTLEVBQUUsR0FBUSxFQUFFOzJCQUFQLEdBQUc7QUFBSztFQUM5Q0EsR0FB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