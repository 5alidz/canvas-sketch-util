const path = require('path');
const transform = require('./transform');
const { promisify } = require('util');
const fs = require('fs');
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);
const globby = require('globby');
const mkdirp = promisify(require('mkdirp'));

module.exports = async (inputs, opt = {}) => {
  const files = await globby([].concat(inputs).filter(Boolean));

  const cwd = process.cwd();
  const inputFolder = opt.input || cwd;
  const outputFolder = opt.output || 'dist';
  const relativeOutput = `./${path.relative(cwd, outputFolder)}/`.replace(/\\/g, '/');

  const transformFile = async file => {
    const inputFile = path.resolve(cwd, file);
    const fileName = path.basename(inputFile);
    const relative = path.relative(inputFolder, inputFile);
    const outputFile = path.resolve(outputFolder, relative);
    const outputEntry = path.resolve(cwd, fileName);

    const src = await readFile(inputFile, 'utf-8');
    const { code } = transform(src, {
      ...opt,
      file: outputFile,
      source: inputFile
    });

    const requireId = relative.replace(/\\/g, '/');
    const requirePath = `${relativeOutput}${requireId}`;

    const entrySrc = [
      '/** This file is auto-generated by a build script; see the src/ directory for original code. */',
      `module.exports = require(${JSON.stringify(requirePath)});\n`
    ].join('\n');
    console.error('Writing', path.relative(cwd, outputFile));
    // console.error('Writing', path.relative(cwd, outputFile), 'and index', path.relative(cwd, outputEntry));
    await mkdirp(path.dirname(outputFile));
    await writeFile(outputEntry, entrySrc);
    await writeFile(outputFile, code);
  };
  return Promise.all(files.map(file => transformFile(file)));
};

if (!module.parent) {
  module.exports('src/**/*.js', {
    input: path.resolve(__dirname, '../src'),
    output: path.resolve(__dirname, '../dist')
  });
}